@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BlazorApptToken.Datas
@inject UserManager<ApplicationUser> UserManager

<h5>Change Password</h5>

@if (IsLoading)
{
    <p>Loading user...</p>
}
else
{
    <EditForm Model="Input" OnValidSubmit="ChangePassword">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">New Password</label>
            <InputText @bind-Value="Input.NewPassword" class="form-control" type="password" />
            <ValidationMessage For="() => Input.NewPassword" />
        </div>

        <div class="mb-3">
            <label class="form-label">Confirm Password</label>
            <InputText @bind-Value="Input.ConfirmPassword" class="form-control" type="password" />
            <ValidationMessage For="() => Input.ConfirmPassword" />
        </div>

        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
}

@code {
    [Parameter] public Guid UserId { get; set; }
    [Parameter] public EventCallback OnSaved { get; set; }

    private bool IsLoading = true;
    private ApplicationUser User;

    private InputModel Input = new();

    protected override async Task OnInitializedAsync()
    {
        User = await UserManager.FindByIdAsync(UserId.ToString());
        IsLoading = false;
    }

    private async Task ChangePassword()
    {
        if (User == null || Input.NewPassword != Input.ConfirmPassword)
        {
            return;
        }

        var token = await UserManager.GeneratePasswordResetTokenAsync(User);
        var result = await UserManager.ResetPasswordAsync(User, token, Input.NewPassword);

        if (result.Succeeded)
        {
            await OnSaved.InvokeAsync();
        }
        else
        {
            foreach (var error in result.Errors)
            {
                Console.Error.WriteLine($"Password change error: {error.Description}");
            }
        }
    }

    public class InputModel
    {
        [Required]
        [StringLength(100, MinimumLength = 6)]
        public string NewPassword { get; set; }

        [Required]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }
}

@page "/Login"
@layout Layout.LoginLayout
@using System.ComponentModel.DataAnnotations

@using BlazorApptToken.Datas
@using BlazorApptToken.Services.API.Controllers
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Login - Blockchain Management System</PageTitle>

<div class="d-flex align-items-center justify-content-center min-vh-100 bg-light">
    <div class="card shadow rounded-4" style="width: 420px;">
        <div class="card-body p-4">
            <h2 class="text-center mb-2 fw-bold">Blockchain Management System</h2>
            <p class="text-center text-muted mb-4">Sign in to your account</p>

            <StatusMessage Message="@errorMessage" />

            <EditForm Model="Input" OnValidSubmit="LoginUser" method="post" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" id="email" autocomplete="username" placeholder="Email" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger small" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" id="password" autocomplete="current-password" placeholder="Password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger small" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMe" />
                    <label class="form-check-label" for="rememberMe">Remember me</label>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger text-center py-2">
                        @errorMessage
                    </div>
                }

                <button type="submit" class="btn btn-primary w-100">Login</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Invalid email or password.";
            Input.Password = string.Empty;
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Enter a valid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }
}
